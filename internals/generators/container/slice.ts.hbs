import { PayloadAction } from '@reduxjs/toolkit';
import { createSlice } from 'utils/@reduxjs/toolkit';
import { ContainerState } from './types';
import { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';


import { {{ camelCase ComponentName }}Saga } from './saga';

// The initial state of the {{ properCase ComponentName }} container
export const initialState: ContainerState = {};

const {{ camelCase ComponentName }}Slice = createSlice({
  name: '{{ camelCase ComponentName }}',
  initialState,
  reducers: {
    someAction(state, action: PayloadAction<any>) {},
  },
});

export const { actions:{{ComponentName}}Actions, reducer:{{ComponentName}}Reducer, name: sliceKey } = {{ camelCase ComponentName }}Slice;

export const use{{ComponentName}}Slice=()=>{
useInjectReducer({ key: sliceKey, reducer: {{ComponentName}}Reducer });
useInjectSaga({ key: sliceKey, saga: {{ camelCase ComponentName }}Saga });
return { {{ComponentName}}Actions }
}